/*
 * Workspace API
 * Agent API
 *
 * OpenAPI spec version: 9.0.000.31.2540
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.genesys.internal.workspace.api;

import com.genesys.internal.common.ApiCallback;
import com.genesys.internal.common.ApiClient;
import com.genesys.internal.common.ApiException;
import com.genesys.internal.common.ApiResponse;
import com.genesys.internal.common.Configuration;
import com.genesys.internal.common.Pair;
import com.genesys.internal.common.ProgressRequestBody;
import com.genesys.internal.common.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.genesys.internal.workspace.model.AddInteractionToWorkbinData;
import com.genesys.internal.workspace.model.ApiErrorResponse;
import com.genesys.internal.workspace.model.ApiSuccessResponse;
import com.genesys.internal.workspace.model.GetWorkbinContentData;
import com.genesys.internal.workspace.model.GetWorkbinsContentData;
import com.genesys.internal.workspace.model.SubscribeToWorkbinNotificationsData;
import com.genesys.internal.workspace.model.SubscribeToWorkbinsNotificationsData;
import com.genesys.internal.workspace.model.UnsubscribeToWorkbinNotificationsData;
import com.genesys.internal.workspace.model.UnsubscribeToWorkbinsNotificationsData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkbinsApi {
    private ApiClient apiClient;

    public WorkbinsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkbinsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addInteractionToWorkbin
     * @param workbinId Id of the Workbin (required)
     * @param addInteractionToWorkbinData  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addInteractionToWorkbinCall(String workbinId, AddInteractionToWorkbinData addInteractionToWorkbinData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addInteractionToWorkbinData;

        // create path and map variables
        String localVarPath = "/workbins/{workbinId}/add-interaction"
            .replaceAll("\\{" + "workbinId" + "\\}", apiClient.escapeString(workbinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addInteractionToWorkbinValidateBeforeCall(String workbinId, AddInteractionToWorkbinData addInteractionToWorkbinData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workbinId' is set
        if (workbinId == null) {
            throw new ApiException("Missing the required parameter 'workbinId' when calling addInteractionToWorkbin(Async)");
        }
        
        // verify the required parameter 'addInteractionToWorkbinData' is set
        if (addInteractionToWorkbinData == null) {
            throw new ApiException("Missing the required parameter 'addInteractionToWorkbinData' when calling addInteractionToWorkbin(Async)");
        }
        

        com.squareup.okhttp.Call call = addInteractionToWorkbinCall(workbinId, addInteractionToWorkbinData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add an Interaction to a workbin
     * 
     * @param workbinId Id of the Workbin (required)
     * @param addInteractionToWorkbinData  (required)
     * @return ApiSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiSuccessResponse addInteractionToWorkbin(String workbinId, AddInteractionToWorkbinData addInteractionToWorkbinData) throws ApiException {
        ApiResponse<ApiSuccessResponse> resp = addInteractionToWorkbinWithHttpInfo(workbinId, addInteractionToWorkbinData);
        return resp.getData();
    }

    /**
     * Add an Interaction to a workbin
     * 
     * @param workbinId Id of the Workbin (required)
     * @param addInteractionToWorkbinData  (required)
     * @return ApiResponse&lt;ApiSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiSuccessResponse> addInteractionToWorkbinWithHttpInfo(String workbinId, AddInteractionToWorkbinData addInteractionToWorkbinData) throws ApiException {
        com.squareup.okhttp.Call call = addInteractionToWorkbinValidateBeforeCall(workbinId, addInteractionToWorkbinData, null, null);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add an Interaction to a workbin (asynchronously)
     * 
     * @param workbinId Id of the Workbin (required)
     * @param addInteractionToWorkbinData  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInteractionToWorkbinAsync(String workbinId, AddInteractionToWorkbinData addInteractionToWorkbinData, final ApiCallback<ApiSuccessResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInteractionToWorkbinValidateBeforeCall(workbinId, addInteractionToWorkbinData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInteractionDetailsFromWorkbin
     * @param interactionId Id of the interaction (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInteractionDetailsFromWorkbinCall(String interactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workbins/interactions/{interactionId}/get-details"
            .replaceAll("\\{" + "interactionId" + "\\}", apiClient.escapeString(interactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInteractionDetailsFromWorkbinValidateBeforeCall(String interactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'interactionId' is set
        if (interactionId == null) {
            throw new ApiException("Missing the required parameter 'interactionId' when calling getInteractionDetailsFromWorkbin(Async)");
        }
        

        com.squareup.okhttp.Call call = getInteractionDetailsFromWorkbinCall(interactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get details of an Interaction which is in a workbin
     * 
     * @param interactionId Id of the interaction (required)
     * @return ApiSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiSuccessResponse getInteractionDetailsFromWorkbin(String interactionId) throws ApiException {
        ApiResponse<ApiSuccessResponse> resp = getInteractionDetailsFromWorkbinWithHttpInfo(interactionId);
        return resp.getData();
    }

    /**
     * Get details of an Interaction which is in a workbin
     * 
     * @param interactionId Id of the interaction (required)
     * @return ApiResponse&lt;ApiSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiSuccessResponse> getInteractionDetailsFromWorkbinWithHttpInfo(String interactionId) throws ApiException {
        com.squareup.okhttp.Call call = getInteractionDetailsFromWorkbinValidateBeforeCall(interactionId, null, null);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get details of an Interaction which is in a workbin (asynchronously)
     * 
     * @param interactionId Id of the interaction (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInteractionDetailsFromWorkbinAsync(String interactionId, final ApiCallback<ApiSuccessResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInteractionDetailsFromWorkbinValidateBeforeCall(interactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWorkbinContent
     * @param workbinId Id of the Workbin (required)
     * @param getWorkbinContentData  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWorkbinContentCall(String workbinId, GetWorkbinContentData getWorkbinContentData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getWorkbinContentData;

        // create path and map variables
        String localVarPath = "/workbins/{workbinId}/get-content"
            .replaceAll("\\{" + "workbinId" + "\\}", apiClient.escapeString(workbinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWorkbinContentValidateBeforeCall(String workbinId, GetWorkbinContentData getWorkbinContentData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workbinId' is set
        if (workbinId == null) {
            throw new ApiException("Missing the required parameter 'workbinId' when calling getWorkbinContent(Async)");
        }
        
        // verify the required parameter 'getWorkbinContentData' is set
        if (getWorkbinContentData == null) {
            throw new ApiException("Missing the required parameter 'getWorkbinContentData' when calling getWorkbinContent(Async)");
        }
        

        com.squareup.okhttp.Call call = getWorkbinContentCall(workbinId, getWorkbinContentData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the content of a Workbin.
     * 
     * @param workbinId Id of the Workbin (required)
     * @param getWorkbinContentData  (required)
     * @return ApiSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiSuccessResponse getWorkbinContent(String workbinId, GetWorkbinContentData getWorkbinContentData) throws ApiException {
        ApiResponse<ApiSuccessResponse> resp = getWorkbinContentWithHttpInfo(workbinId, getWorkbinContentData);
        return resp.getData();
    }

    /**
     * Get the content of a Workbin.
     * 
     * @param workbinId Id of the Workbin (required)
     * @param getWorkbinContentData  (required)
     * @return ApiResponse&lt;ApiSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiSuccessResponse> getWorkbinContentWithHttpInfo(String workbinId, GetWorkbinContentData getWorkbinContentData) throws ApiException {
        com.squareup.okhttp.Call call = getWorkbinContentValidateBeforeCall(workbinId, getWorkbinContentData, null, null);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the content of a Workbin. (asynchronously)
     * 
     * @param workbinId Id of the Workbin (required)
     * @param getWorkbinContentData  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWorkbinContentAsync(String workbinId, GetWorkbinContentData getWorkbinContentData, final ApiCallback<ApiSuccessResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWorkbinContentValidateBeforeCall(workbinId, getWorkbinContentData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWorkbins
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWorkbinsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workbins/get-workbins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWorkbinsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getWorkbinsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get All Valid Workbins.
     * 
     * @return ApiSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiSuccessResponse getWorkbins() throws ApiException {
        ApiResponse<ApiSuccessResponse> resp = getWorkbinsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get All Valid Workbins.
     * 
     * @return ApiResponse&lt;ApiSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiSuccessResponse> getWorkbinsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getWorkbinsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Valid Workbins. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWorkbinsAsync(final ApiCallback<ApiSuccessResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWorkbinsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWorkbinsContent
     * @param getWorkbinsContentData  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWorkbinsContentCall(GetWorkbinsContentData getWorkbinsContentData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getWorkbinsContentData;

        // create path and map variables
        String localVarPath = "/workbins/get-contents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWorkbinsContentValidateBeforeCall(GetWorkbinsContentData getWorkbinsContentData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getWorkbinsContentData' is set
        if (getWorkbinsContentData == null) {
            throw new ApiException("Missing the required parameter 'getWorkbinsContentData' when calling getWorkbinsContent(Async)");
        }
        

        com.squareup.okhttp.Call call = getWorkbinsContentCall(getWorkbinsContentData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the content of multiple Workbins.
     * 
     * @param getWorkbinsContentData  (required)
     * @return ApiSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiSuccessResponse getWorkbinsContent(GetWorkbinsContentData getWorkbinsContentData) throws ApiException {
        ApiResponse<ApiSuccessResponse> resp = getWorkbinsContentWithHttpInfo(getWorkbinsContentData);
        return resp.getData();
    }

    /**
     * Get the content of multiple Workbins.
     * 
     * @param getWorkbinsContentData  (required)
     * @return ApiResponse&lt;ApiSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiSuccessResponse> getWorkbinsContentWithHttpInfo(GetWorkbinsContentData getWorkbinsContentData) throws ApiException {
        com.squareup.okhttp.Call call = getWorkbinsContentValidateBeforeCall(getWorkbinsContentData, null, null);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the content of multiple Workbins. (asynchronously)
     * 
     * @param getWorkbinsContentData  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWorkbinsContentAsync(GetWorkbinsContentData getWorkbinsContentData, final ApiCallback<ApiSuccessResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWorkbinsContentValidateBeforeCall(getWorkbinsContentData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subscribeToWorkbinNotifications
     * @param workbinId Id of the Workbin (required)
     * @param subscribeToWorkbinNotificationsData  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subscribeToWorkbinNotificationsCall(String workbinId, SubscribeToWorkbinNotificationsData subscribeToWorkbinNotificationsData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = subscribeToWorkbinNotificationsData;

        // create path and map variables
        String localVarPath = "/workbins/{workbinId}/subscribe"
            .replaceAll("\\{" + "workbinId" + "\\}", apiClient.escapeString(workbinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscribeToWorkbinNotificationsValidateBeforeCall(String workbinId, SubscribeToWorkbinNotificationsData subscribeToWorkbinNotificationsData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workbinId' is set
        if (workbinId == null) {
            throw new ApiException("Missing the required parameter 'workbinId' when calling subscribeToWorkbinNotifications(Async)");
        }
        
        // verify the required parameter 'subscribeToWorkbinNotificationsData' is set
        if (subscribeToWorkbinNotificationsData == null) {
            throw new ApiException("Missing the required parameter 'subscribeToWorkbinNotificationsData' when calling subscribeToWorkbinNotifications(Async)");
        }
        

        com.squareup.okhttp.Call call = subscribeToWorkbinNotificationsCall(workbinId, subscribeToWorkbinNotificationsData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Subscribe to be notified of changes of the content of a Workbin.
     * 
     * @param workbinId Id of the Workbin (required)
     * @param subscribeToWorkbinNotificationsData  (required)
     * @return ApiSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiSuccessResponse subscribeToWorkbinNotifications(String workbinId, SubscribeToWorkbinNotificationsData subscribeToWorkbinNotificationsData) throws ApiException {
        ApiResponse<ApiSuccessResponse> resp = subscribeToWorkbinNotificationsWithHttpInfo(workbinId, subscribeToWorkbinNotificationsData);
        return resp.getData();
    }

    /**
     * Subscribe to be notified of changes of the content of a Workbin.
     * 
     * @param workbinId Id of the Workbin (required)
     * @param subscribeToWorkbinNotificationsData  (required)
     * @return ApiResponse&lt;ApiSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiSuccessResponse> subscribeToWorkbinNotificationsWithHttpInfo(String workbinId, SubscribeToWorkbinNotificationsData subscribeToWorkbinNotificationsData) throws ApiException {
        com.squareup.okhttp.Call call = subscribeToWorkbinNotificationsValidateBeforeCall(workbinId, subscribeToWorkbinNotificationsData, null, null);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Subscribe to be notified of changes of the content of a Workbin. (asynchronously)
     * 
     * @param workbinId Id of the Workbin (required)
     * @param subscribeToWorkbinNotificationsData  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscribeToWorkbinNotificationsAsync(String workbinId, SubscribeToWorkbinNotificationsData subscribeToWorkbinNotificationsData, final ApiCallback<ApiSuccessResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscribeToWorkbinNotificationsValidateBeforeCall(workbinId, subscribeToWorkbinNotificationsData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subscribeToWorkbinsNotifications
     * @param subscribeToWorkbinsNotificationsData  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subscribeToWorkbinsNotificationsCall(SubscribeToWorkbinsNotificationsData subscribeToWorkbinsNotificationsData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = subscribeToWorkbinsNotificationsData;

        // create path and map variables
        String localVarPath = "/workbins/subscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscribeToWorkbinsNotificationsValidateBeforeCall(SubscribeToWorkbinsNotificationsData subscribeToWorkbinsNotificationsData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subscribeToWorkbinsNotificationsData' is set
        if (subscribeToWorkbinsNotificationsData == null) {
            throw new ApiException("Missing the required parameter 'subscribeToWorkbinsNotificationsData' when calling subscribeToWorkbinsNotifications(Async)");
        }
        

        com.squareup.okhttp.Call call = subscribeToWorkbinsNotificationsCall(subscribeToWorkbinsNotificationsData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Subscribe to be notified of changes of the content of multiple Workbins.
     * 
     * @param subscribeToWorkbinsNotificationsData  (required)
     * @return ApiSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiSuccessResponse subscribeToWorkbinsNotifications(SubscribeToWorkbinsNotificationsData subscribeToWorkbinsNotificationsData) throws ApiException {
        ApiResponse<ApiSuccessResponse> resp = subscribeToWorkbinsNotificationsWithHttpInfo(subscribeToWorkbinsNotificationsData);
        return resp.getData();
    }

    /**
     * Subscribe to be notified of changes of the content of multiple Workbins.
     * 
     * @param subscribeToWorkbinsNotificationsData  (required)
     * @return ApiResponse&lt;ApiSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiSuccessResponse> subscribeToWorkbinsNotificationsWithHttpInfo(SubscribeToWorkbinsNotificationsData subscribeToWorkbinsNotificationsData) throws ApiException {
        com.squareup.okhttp.Call call = subscribeToWorkbinsNotificationsValidateBeforeCall(subscribeToWorkbinsNotificationsData, null, null);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Subscribe to be notified of changes of the content of multiple Workbins. (asynchronously)
     * 
     * @param subscribeToWorkbinsNotificationsData  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscribeToWorkbinsNotificationsAsync(SubscribeToWorkbinsNotificationsData subscribeToWorkbinsNotificationsData, final ApiCallback<ApiSuccessResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscribeToWorkbinsNotificationsValidateBeforeCall(subscribeToWorkbinsNotificationsData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unsubscribeToWorkbinNotifications
     * @param workbinId Id of the Workbin (required)
     * @param unsubscribeToWorkbinNotificationsData  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unsubscribeToWorkbinNotificationsCall(String workbinId, UnsubscribeToWorkbinNotificationsData unsubscribeToWorkbinNotificationsData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = unsubscribeToWorkbinNotificationsData;

        // create path and map variables
        String localVarPath = "/workbins/{workbinId}/unsubscribe"
            .replaceAll("\\{" + "workbinId" + "\\}", apiClient.escapeString(workbinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unsubscribeToWorkbinNotificationsValidateBeforeCall(String workbinId, UnsubscribeToWorkbinNotificationsData unsubscribeToWorkbinNotificationsData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workbinId' is set
        if (workbinId == null) {
            throw new ApiException("Missing the required parameter 'workbinId' when calling unsubscribeToWorkbinNotifications(Async)");
        }
        
        // verify the required parameter 'unsubscribeToWorkbinNotificationsData' is set
        if (unsubscribeToWorkbinNotificationsData == null) {
            throw new ApiException("Missing the required parameter 'unsubscribeToWorkbinNotificationsData' when calling unsubscribeToWorkbinNotifications(Async)");
        }
        

        com.squareup.okhttp.Call call = unsubscribeToWorkbinNotificationsCall(workbinId, unsubscribeToWorkbinNotificationsData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unsubscribe to the notifications of changes of the content of a Workbin.
     * 
     * @param workbinId Id of the Workbin (required)
     * @param unsubscribeToWorkbinNotificationsData  (required)
     * @return ApiSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiSuccessResponse unsubscribeToWorkbinNotifications(String workbinId, UnsubscribeToWorkbinNotificationsData unsubscribeToWorkbinNotificationsData) throws ApiException {
        ApiResponse<ApiSuccessResponse> resp = unsubscribeToWorkbinNotificationsWithHttpInfo(workbinId, unsubscribeToWorkbinNotificationsData);
        return resp.getData();
    }

    /**
     * Unsubscribe to the notifications of changes of the content of a Workbin.
     * 
     * @param workbinId Id of the Workbin (required)
     * @param unsubscribeToWorkbinNotificationsData  (required)
     * @return ApiResponse&lt;ApiSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiSuccessResponse> unsubscribeToWorkbinNotificationsWithHttpInfo(String workbinId, UnsubscribeToWorkbinNotificationsData unsubscribeToWorkbinNotificationsData) throws ApiException {
        com.squareup.okhttp.Call call = unsubscribeToWorkbinNotificationsValidateBeforeCall(workbinId, unsubscribeToWorkbinNotificationsData, null, null);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unsubscribe to the notifications of changes of the content of a Workbin. (asynchronously)
     * 
     * @param workbinId Id of the Workbin (required)
     * @param unsubscribeToWorkbinNotificationsData  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsubscribeToWorkbinNotificationsAsync(String workbinId, UnsubscribeToWorkbinNotificationsData unsubscribeToWorkbinNotificationsData, final ApiCallback<ApiSuccessResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsubscribeToWorkbinNotificationsValidateBeforeCall(workbinId, unsubscribeToWorkbinNotificationsData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unsubscribeToWorkbinsNotifications
     * @param unsubscribeToWorkbinsNotificationsData  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unsubscribeToWorkbinsNotificationsCall(UnsubscribeToWorkbinsNotificationsData unsubscribeToWorkbinsNotificationsData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = unsubscribeToWorkbinsNotificationsData;

        // create path and map variables
        String localVarPath = "/workbins/unsubscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unsubscribeToWorkbinsNotificationsValidateBeforeCall(UnsubscribeToWorkbinsNotificationsData unsubscribeToWorkbinsNotificationsData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'unsubscribeToWorkbinsNotificationsData' is set
        if (unsubscribeToWorkbinsNotificationsData == null) {
            throw new ApiException("Missing the required parameter 'unsubscribeToWorkbinsNotificationsData' when calling unsubscribeToWorkbinsNotifications(Async)");
        }
        

        com.squareup.okhttp.Call call = unsubscribeToWorkbinsNotificationsCall(unsubscribeToWorkbinsNotificationsData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unsubscribe to the notifications of changes of the content of multiple Workbins.
     * 
     * @param unsubscribeToWorkbinsNotificationsData  (required)
     * @return ApiSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiSuccessResponse unsubscribeToWorkbinsNotifications(UnsubscribeToWorkbinsNotificationsData unsubscribeToWorkbinsNotificationsData) throws ApiException {
        ApiResponse<ApiSuccessResponse> resp = unsubscribeToWorkbinsNotificationsWithHttpInfo(unsubscribeToWorkbinsNotificationsData);
        return resp.getData();
    }

    /**
     * Unsubscribe to the notifications of changes of the content of multiple Workbins.
     * 
     * @param unsubscribeToWorkbinsNotificationsData  (required)
     * @return ApiResponse&lt;ApiSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiSuccessResponse> unsubscribeToWorkbinsNotificationsWithHttpInfo(UnsubscribeToWorkbinsNotificationsData unsubscribeToWorkbinsNotificationsData) throws ApiException {
        com.squareup.okhttp.Call call = unsubscribeToWorkbinsNotificationsValidateBeforeCall(unsubscribeToWorkbinsNotificationsData, null, null);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unsubscribe to the notifications of changes of the content of multiple Workbins. (asynchronously)
     * 
     * @param unsubscribeToWorkbinsNotificationsData  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsubscribeToWorkbinsNotificationsAsync(UnsubscribeToWorkbinsNotificationsData unsubscribeToWorkbinsNotificationsData, final ApiCallback<ApiSuccessResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsubscribeToWorkbinsNotificationsValidateBeforeCall(unsubscribeToWorkbinsNotificationsData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiSuccessResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
